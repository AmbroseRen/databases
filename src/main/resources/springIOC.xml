<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">
		
<!-- Bean对象注入 -->
		<context:component-scan base-package="AmbroseRen.annotation"></context:component-scan>
		<context:component-scan base-package="AmbroseRen.bean"></context:component-scan>
		<!-- 读取properties文件 -->
		<!-- 
			容器会依据location所指定的位置读取properties文件的内容
			<java1.8>不支持location属性，支持bean属性，要么升级spring到4，要么降低jdk到1.7
			并将这些内容添加到properties对象里面
			注：
				classpath：依据类路径去查找
		 -->		
		<util:properties id="config" location="classpath:config.properties"/>
		
		<!-- Set方法设置@Required 
				检测确定Bean注入字段属性已设置，启用ref="rabpp"-->
		<bean id="rabpp" class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>
		
<!-- Xml对象注入 -->
		<bean id="stu1" class="AmbroseRen.annotation.Student">
			<!-- 键值 -->
			<property name="name" value="楚乔"/>
			<property name="age" value="22"/>
			
			<!-- 一键多值	List+Set -->
			<property name="interest">
				<list>
					<value>报仇</value>
					<value>射箭</value>
					<value>画画</value>
				</list>
			</property>	
			
			<property name="city">
				<set>
					<value>北京</value>
					<value>上海</value>
					<value>深圳</value>
				</set>
			</property>	
			
			<!-- 键值对	Map+props -->
			<property name="score">
				<map>
					<entry key="english" value="59.5"/>
					<entry key="math" value="80"/>
				</map>
			</property>
			
			<property name="db">
				<props>
					<prop key="uname">Tom</prop>
					<prop key="name">King</prop>
				</props>
			</property>	
							
		</bean>
		
<!-- 使用spring表达式"!!读取"bean的属性值 或 集合类型的值 -->
		<bean id="extract" class="AmbroseRen.annotation.extractStudent">
			<property name="name" value="#{stu1.name}"></property>
			<property name="interest" value="#{stu1.interest[1]}"/>
			<property name="score" value="#{stu1.score.english}"/>
			<!-- <property name="interestBean" value="#{stu1.value[’放火‘]}"/> -->
			<property name="pageSize" value="#{config.pagesize}"/>
		</bean>			
		
<!-- 纯Xml注入 -->
		<bean id="stu2" class="AmbroseRen.annotation.Student">
			<property name="name" value="楚乔"/>
			<property name="age" value="22"/>
			<property name="interest" ref="interestBean"/>
			<property name="city" ref="cityBean"/>
			<property name="score" ref="scoreBean"/>
			<property name="db" ref="dbBean"/>
		</bean>
		
		<!-- 注入集合类型的值 -->
		<util:list id="interestBean">
			<value>杀人</value>
			<value>放火</value>
			<value>黑三观</value>		
		</util:list>
		
		<util:set id="cityBean">
			<value>金陵</value>
			<value>洛阳</value>
			<value>北平</value>
		</util:set>
		
		<util:map id="scoreBean">
				<entry key="english" value="80"/>
				<entry key="math" value="90"/>
		</util:map>
		
		<util:properties id="dbBean">
			<prop key="uname">Kill</prop>
			<prop key="pwd">xxx</prop>
		</util:properties>							

		
		<!-- 利用无参构造器创建对象 -->
		<!-- 
			bean：被容器所管理的对象
			id:要求唯一
			class：要写类的完整名字
			  注：spring容器利用java反射来查找类的字节码文件
			 然后完成类的加载
		 -->		
		<bean id="wt1" class="AmbroseRen.bean.Waiter"/>
		
		<!-- 
			利用静态工厂方法创建对象
			factory-method:指定静态方法
			注：容器会调用该方法来创建对象		
		 -->
		<bean id="cal" class="java.util.Calendar" factory-method="getInstance"/>	
		<bean id="time" factory-bean="cal" factory-method="getTime"/>		
		
		<!-- 
			init-method:指定初始化方法名
			destroy-method:指定销毁方法
			  注：只有作用域为singleton时，销毁方法才会执行
		 -->
		 <bean id="mb1" class="AmbroseRen.bean.MessageBean" init-method="init" 
		 	destroy-method="destroy" scope="singleton"/>		
		
		<bean id="b1" class="AmbroseRen.bean.B"/>
		<!-- 
			设置作用域，缺省值是singleton
			如果值是prototype，则容器会创建多个实例
		 -->		
		<bean id="eb1" class="AmbroseRen.bean.ExampleBean" scope="prototype"/>
		
		<!-- lazy-init:为true表示延迟加载 lazy-init="true"-->
		<bean id="c1" class="AmbroseRen.bean.C" />
		 
		 <!-- 配置构造器注入：construncor-arg
		 	index:指定参数的位置
		  -->
		<!-- 
			autowire:配置自动装配
			byName:容器依据属性名区查找对应的bean（即以属性名作为bean的id），
				找到后，调用对应的set方法
				注：找不到对应的bean，不会注入
			byType:容器依据属性类型取查找对应的bean（即查找类型与属性类型一致的bean），
			找到后调用对应的set方法
			constructor:类似byType，找到后，会调用构造器来注入
		 -->		
		<bean id="rest1" class="AmbroseRen.bean.Restaurant" autowire="byName">
			<constructor-arg index="0" ref="wt1"/>
		</bean>	
				
		<!-- 
			property:配置set方法注入，其中name属性指定调用的方法，
			而ref属性指定被注入的bean的id
		 -->
		<bean id="a1" class="AmbroseRen.bean.A">
			<property name="b" ref="c1"></property>
		</bean>			
		
</beans>		